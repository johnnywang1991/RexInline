.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Rex::Inline 3"
.TH Rex::Inline 3 "2015-04-01" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Rex::Inline \- write Rex in perl
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Rex::Inline is an \s-1API\s0 of \fIRex\fR module write with Moose.
.PP
when you want use rex in your perl program,
.PP
and do not want to use the \fBrex\fR command line,
.PP
you can try to use this module.
.SH "GETTING HELP"
.IX Header "GETTING HELP"
.IP "\(bu" 1
Bug Tracker: <https://github.com/johnnywang1991/RexInline/issues>
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Rex::Inline;
\&  use Rex::Inline::Test;
\&
\&  my $rex_inline = Rex::Inline\->new(use_debug => 0);
\&
\&  # Rex::Inline::Test is based on Rex::Inline::Base module
\&  # See Rex::Inline::Base Documents
\&  $rex_inline\->add_task(
\&    Rex::Inline::Test\->new(
\&      user => $user,
\&      server => [@server],
\&      # if need password
\&      password => $password,
\&      # optional
\&      public_key => $public_key,
\&      private_key => $private_key,
\&      # input param, in any format you want
\&      input => $input,
\&    )
\&  );
\&
\&  # or data reference like this
\&  $rex_inline\->add_task(
\&    {
\&      name => \*(Aqsomething_uniq_string\*(Aq,  # name is required when add data_reference task
\&      func => sub {                     # func is required when add data_reference task
\&        ...
\&      },
\&      user => $user,
\&      server => [@server],
\&      # if need password
\&      password => $password,
\&      # optional
\&      public_key => $public_key,
\&      private_key => $private_key,
\&    }
\&  );
\&
\&  $rex_inline\->execute;
\&
\&  # get rex task reports
\&  $rex_inline\->reports;
.Ve
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.IP "use_debug" 7
.IX Item "use_debug"
set/get debug option (Bool)
.Sp
Print or not debug level log
.Sp
see \fBrex \-d\fR option
.Sp
default is 0 (disabled)
.IP "use_cache" 7
.IX Item "use_cache"
set/get use_cache option (Bool)
.Sp
Use or not \fBrex \-c\fR option
.Sp
default is 1 (enable)
.IP "use_report" 7
.IX Item "use_report"
set/get use_report option (Bool)
.Sp
show rex report result
.Sp
default is 1 (enable)
.IP "log_dir" 7
.IX Item "log_dir"
set/get log dir (String)
.Sp
default is \f(CW"./rexlogs/"\fR
.IP "parallelism" 7
.IX Item "parallelism"
set/get parallelism nums (Int)
.Sp
see \fBrex \-t\fR option
.Sp
default is 5
.IP "log_paths" 7
.IX Item "log_paths"
get log paths (ArrayRef)
.Sp
format is [{task_id => log_path}, ...]
.Sp
\&\fIreadonly\fR
.IP "reports" 7
.IX Item "reports"
get rex process reports (ArrayRef)
.Sp
format is \f(CW\*(C`[{report =\*(C'\fR \f(CW$report_ref\fR, task_id => \f(CW$task_id\fR, date => \f(CW$date\fR, hostname => \f(CW$hostname\fR}, ...]>
.Sp
\&\fIreadonly\fR
.SH "METHODS"
.IX Header "METHODS"
.IP "add_task" 2
.IX Item "add_task"
add \fBRex::Inline::Base\fR Object to TaskList
.Sp
or Add Data reference to TaskList
.Sp
.Vb 1
\&  my $rex_inline = Rex::Inline\->new;
\&
\&  $rex_inline\->add_task({
\&      name => \*(Aqsomething_uniq_string\*(Aq, # required when add data_reference task
\&      func => sub { # required when add data_reference task
\&        ...
\&      },
\&      user => $user2,
\&      server => [@server2],
\&      # if need password
\&      password => $password2,
\&      # optional
\&      public_key => $public_key2,
\&      private_key => $private_key2,
\&  });
\&
\&  ...
.Ve
.IP "execute" 2
.IX Item "execute"
Execute all loaded Task in parallel
.Sp
.Vb 1
\&  $rex_inline\->execute;
.Ve
